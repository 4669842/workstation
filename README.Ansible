Quickly prepare (development) environment with Ansible.


= Workstation

..is a box with some operating system and personal tools
needeed to do the job.

The basic stuff I expect to see on every Linux machine:

  (browser: all firefox, google-chrome)
  git
  hg
  vim

Windows is the same, except that vim is replaced with
Far Manager + Colorer.

Below are these requirements adapted for the clean
installs of some operating systems.

== Workstation: Linux, Ubuntu 13.04

  git
  hg
  vim

  google-chrome


= Bootstraping workstations
== ..with Ansible on Linux (Ubuntu 13.04)

Too long/didn't read:

  sudo apt-get install ansible
  git clone git://github.com/techtonik/workstation.git
  cd workstation/ansible
  ansible localhost -i hosts -a uname

--- WIP ---
  
Now in more detail.

At the most basic level Ansible is a command line tool
that runs playbooks. Playbook is a configuration file
that (unlike shell script) can be automatically parsed,
checked and changed with various tools. Ansible is one
such tool.

Ansible runs playbooks over network. It takes playbook
from local machine, connects to remote through ssh and
executes instructions there.

Ansible docs are located at:
http://www.ansibleworks.com/docs/

To operate, Ansible needs a file with network
definition called "inventory file" usually located at
/etc/ansible/hosts


-- WIP --

Comparison - Chef Cookbooks // Ansible Playbooks:
[ ] reusability
[ ] cross-platformedness
[ ] availability
[ ] dependent books

Example when you don't know exact package names to install
'vim' on different systems.

=== 1. install Ansible

(tested: Ubuntu 13.04, Ansible 1.2):
  sudo apt-get install ansible

=== 2. create hosts configuration file

It doesn't seem possible to specify unknown host to run
playbook from command line. Ansible needs to know hosts
beforehand, and for that you have to create inventory
configuration file. Standard location is
/etc/ansible/hosts, but it is possible to place it
anywhere.

  vim ansible/hosts

The contents of the file for my machine:

  $ cat ansible/localhost

=== 3. run Ansible and SSH commands

Now you can run ansible (you may need to setup SSH):

  $ ansible localhost -i ansible/hosts -a uname
  localhost | success | rc=0 >>
  Linux

Here `localhost` is a mask, `-a uname` is a parameter to
default `command` module that executes `uname`.

Ansible commands are grouped into modules. For example,
there is a module named `ping` to check connections:

  $ ansible localhost -i ansible/hosts -m ping
  localhost | success >> {
      "changed": false, 
      "ping": "pong"
  }

"changed" value contains Ansible guess if machine state
was changed or not. "ping" is a result specific to ping
module, which is a standard "pong" response.

For a list of Ansible modules see:
http://www.ansibleworks.com/docs/modules.html

=== 


First you need to create/get Chef Repository, where you
create Cheffile. Mine is here:

  git clone git://github.com/techtonik/workstation.git
  cd workstation/chef

Fetch dependencies:

  librarian-chef install

Run chef-solo for local repository:

  sudo `which chef-solo` -c config-solo.rb

`which` is required here, because by default chef-solo is
not in PATH for `root` user on Fedora. 

Notes: When started I hoped that I could just install
chef-solo and run it against remote GitHub URL so that it
could get recipe, figure out dependent cookbooks, resolve
dependencies, download them and run. In Chef 10.12.0 this
scenario is not ready (yet?).

=== 3. enjoy cooking solo


